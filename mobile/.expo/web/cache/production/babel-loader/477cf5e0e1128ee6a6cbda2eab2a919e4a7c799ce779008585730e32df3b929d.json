{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"status\",\"theme\",\"disabled\",\"onPress\",\"testID\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{getAndroidSelectionControlColor}from'./utils';import{useInternalTheme}from'../../core/theming';import MaterialCommunityIcon from'../MaterialCommunityIcon';import TouchableRipple from'../TouchableRipple/TouchableRipple';var ANIMATION_DURATION=100;var CheckboxAndroid=function CheckboxAndroid(_ref){var status=_ref.status,themeOverrides=_ref.theme,disabled=_ref.disabled,onPress=_ref.onPress,testID=_ref.testID,rest=_objectWithoutProperties(_ref,_excluded);var theme=useInternalTheme(themeOverrides);var _React$useRef=React.useRef(new Animated.Value(1)),scaleAnim=_React$useRef.current;var isFirstRendering=React.useRef(true);var scale=theme.animation.scale;React.useEffect(function(){if(isFirstRendering.current){isFirstRendering.current=false;return;}var checked=status==='checked';Animated.sequence([Animated.timing(scaleAnim,{toValue:0.85,duration:checked?ANIMATION_DURATION*scale:0,useNativeDriver:false}),Animated.timing(scaleAnim,{toValue:1,duration:checked?ANIMATION_DURATION*scale:ANIMATION_DURATION*scale*1.75,useNativeDriver:false})]).start();},[status,scaleAnim,scale]);var checked=status==='checked';var indeterminate=status==='indeterminate';var _getAndroidSelectionC=getAndroidSelectionControlColor({theme:theme,disabled:disabled,checked:checked,customColor:rest.color,customUncheckedColor:rest.uncheckedColor}),rippleColor=_getAndroidSelectionC.rippleColor,selectionControlColor=_getAndroidSelectionC.selectionControlColor;var borderWidth=scaleAnim.interpolate({inputRange:[0.8,1],outputRange:[7,0]});var icon=indeterminate?'minus-box':checked?'checkbox-marked':'checkbox-blank-outline';return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:onPress,disabled:disabled,accessibilityRole:\"checkbox\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID,theme:theme}),React.createElement(Animated.View,{style:{transform:[{scale:scaleAnim}]}},React.createElement(MaterialCommunityIcon,{allowFontScaling:false,name:icon,size:24,color:selectionControlColor,direction:\"ltr\"}),React.createElement(View,{style:[StyleSheet.absoluteFill,styles.fillContainer]},React.createElement(Animated.View,{style:[styles.fill,{borderColor:selectionControlColor},{borderWidth:borderWidth}]}))));};CheckboxAndroid.displayName='Checkbox.Android';var styles=StyleSheet.create({container:{borderRadius:18,width:36,height:36,padding:6},fillContainer:{alignItems:'center',justifyContent:'center'},fill:{height:14,width:14}});export default CheckboxAndroid;export{CheckboxAndroid};","map":{"version":3,"names":["React","Animated","StyleSheet","View","getAndroidSelectionControlColor","useInternalTheme","MaterialCommunityIcon","TouchableRipple","ANIMATION_DURATION","CheckboxAndroid","_ref","status","themeOverrides","theme","disabled","onPress","testID","rest","_objectWithoutProperties","_excluded","_React$useRef","useRef","Value","scaleAnim","current","isFirstRendering","scale","animation","useEffect","checked","sequence","timing","toValue","duration","useNativeDriver","start","indeterminate","_getAndroidSelectionC","customColor","color","customUncheckedColor","uncheckedColor","rippleColor","selectionControlColor","borderWidth","interpolate","inputRange","outputRange","icon","createElement","_extends","borderless","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","transform","allowFontScaling","name","size","direction","absoluteFill","fillContainer","fill","borderColor","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent"],"sources":["C:\\Users\\User\\Downloads\\git_frontend\\mobile\\node_modules\\react-native-paper\\src\\components\\Checkbox\\CheckboxAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport { getAndroidSelectionControlColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, ThemeProp } from '../../types';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple\n */\nconst CheckboxAndroid = ({\n  status,\n  theme: themeOverrides,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const { rippleColor, selectionControlColor } =\n    getAndroidSelectionControlColor({\n      theme,\n      disabled,\n      checked,\n      customColor: rest.color,\n      customUncheckedColor: rest.uncheckedColor,\n    });\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n      theme={theme}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={selectionControlColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: selectionControlColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default CheckboxAndroid;\n\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}