{"ast":null,"code":"export function getFilename(url){var _URL=new URL(url,'https://e'),pathname=_URL.pathname,searchParams=_URL.searchParams;if(false){if(searchParams.has('unstable_path')){var encodedFilePath=decodeURIComponent(searchParams.get('unstable_path'));return getBasename(encodedFilePath);}}return getBasename(pathname);}function getBasename(pathname){return pathname.substring(pathname.lastIndexOf('/')+1);}export function getFileExtension(url){var filename=getFilename(url);var dotIndex=filename.lastIndexOf('.');return dotIndex>0?filename.substring(dotIndex):'';}export function getManifestBaseUrl(manifestUrl){var urlObject=new URL(manifestUrl);var nextProtocol=urlObject.protocol;if(nextProtocol==='exp:'){nextProtocol='http:';}else if(nextProtocol==='exps:'){nextProtocol='https:';}urlObject.protocol=nextProtocol;var directory=urlObject.pathname.substring(0,urlObject.pathname.lastIndexOf('/')+1);urlObject.pathname=directory;urlObject.search='';urlObject.hash='';return urlObject.protocol!==nextProtocol?urlObject.href.replace(urlObject.protocol,nextProtocol):urlObject.href;}","map":{"version":3,"names":["getFilename","url","_URL","URL","pathname","searchParams","has","encodedFilePath","decodeURIComponent","get","getBasename","substring","lastIndexOf","getFileExtension","filename","dotIndex","getManifestBaseUrl","manifestUrl","urlObject","nextProtocol","protocol","directory","search","hash","href","replace"],"sources":["C:\\Users\\User\\Downloads\\git_frontend\\mobile\\node_modules\\expo-asset\\src\\AssetUris.ts"],"sourcesContent":["export function getFilename(url: string): string {\n  const { pathname, searchParams } = new URL(url, 'https://e');\n\n  // When attached to a dev server, we use `unstable_path` to represent the file path. This ensures\n  // the file name is not canonicalized by the browser.\n  // NOTE(EvanBacon): This is technically not tied to `__DEV__` as it's possible to use this while bundling in production\n  // mode.\n  if (__DEV__) {\n    if (searchParams.has('unstable_path')) {\n      const encodedFilePath = decodeURIComponent(searchParams.get('unstable_path')!);\n      return getBasename(encodedFilePath);\n    }\n  }\n\n  return getBasename(pathname);\n}\n\nfunction getBasename(pathname: string): string {\n  return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\n\nexport function getFileExtension(url: string): string {\n  const filename = getFilename(url);\n  const dotIndex = filename.lastIndexOf('.');\n  // Ignore leading dots for hidden files\n  return dotIndex > 0 ? filename.substring(dotIndex) : '';\n}\n\n/**\n * Returns the base URL from a manifest's URL. For example, given a manifest hosted at\n * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query\n * parameters and fragments also are removed.\n *\n * For an Expo-hosted project with a manifest hosted at https://exp.host/@user/project/index.exp, the\n * base URL would be https://exp.host/@user/project.\n *\n * We also normalize the \"exp\" protocol to \"http\" to handle internal URLs with the Expo schemes used\n * to tell the OS to open the URLs in the the Expo client.\n */\nexport function getManifestBaseUrl(manifestUrl: string): string {\n  const urlObject = new URL(manifestUrl);\n\n  let nextProtocol = urlObject.protocol;\n  // Change the scheme to http(s) if it is exp(s)\n  if (nextProtocol === 'exp:') {\n    nextProtocol = 'http:';\n  } else if (nextProtocol === 'exps:') {\n    nextProtocol = 'https:';\n  }\n  urlObject.protocol = nextProtocol;\n\n  // Trim filename, query parameters, and fragment, if any\n  const directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n  urlObject.pathname = directory;\n  urlObject.search = '';\n  urlObject.hash = '';\n\n  // The URL spec doesn't allow for changing the protocol to `http` or `https`\n  // without a port set so instead, we'll just swap the protocol manually.\n  return urlObject.protocol !== nextProtocol\n    ? urlObject.href.replace(urlObject.protocol, nextProtocol)\n    : urlObject.href;\n}\n"],"mappings":"AAAA,MAAM,SAAU,CAAAA,WAAWA,CAACC,GAAW,EACrC,IAAAC,IAAA,CAAmC,GAAI,CAAAC,GAAG,CAACF,GAAG,CAAE,WAAW,CAAC,CAApDG,QAAQ,CAAAF,IAAA,CAARE,QAAQ,CAAEC,YAAY,CAAAH,IAAA,CAAZG,YAAY,CAM9B,SAAa,CACX,GAAIA,YAAY,CAACC,GAAG,CAAC,eAAe,CAAC,CAAE,CACrC,GAAM,CAAAC,eAAe,CAAGC,kBAAkB,CAACH,YAAY,CAACI,GAAG,CAAC,eAAe,CAAE,CAAC,CAC9E,MAAO,CAAAC,WAAW,CAACH,eAAe,CAAC,C,EAIvC,MAAO,CAAAG,WAAW,CAACN,QAAQ,CAAC,CAC9B,CAEA,QAAS,CAAAM,WAAWA,CAACN,QAAgB,EACnC,MAAO,CAAAA,QAAQ,CAACO,SAAS,CAACP,QAAQ,CAACQ,WAAW,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC,CAC1D,CAEA,MAAM,SAAU,CAAAC,gBAAgBA,CAACZ,GAAW,EAC1C,GAAM,CAAAa,QAAQ,CAAGd,WAAW,CAACC,GAAG,CAAC,CACjC,GAAM,CAAAc,QAAQ,CAAGD,QAAQ,CAACF,WAAW,CAAC,GAAG,CAAC,CAE1C,MAAO,CAAAG,QAAQ,CAAG,CAAC,CAAGD,QAAQ,CAACH,SAAS,CAACI,QAAQ,CAAC,CAAG,EAAE,CACzD,CAaA,MAAM,SAAU,CAAAC,kBAAkBA,CAACC,WAAmB,EACpD,GAAM,CAAAC,SAAS,CAAG,GAAI,CAAAf,GAAG,CAACc,WAAW,CAAC,CAEtC,GAAI,CAAAE,YAAY,CAAGD,SAAS,CAACE,QAAQ,CAErC,GAAID,YAAY,GAAK,MAAM,CAAE,CAC3BA,YAAY,CAAG,OAAO,C,CACvB,IAAM,IAAIA,YAAY,GAAK,OAAO,CAAE,CACnCA,YAAY,CAAG,QAAQ,C,CAEzBD,SAAS,CAACE,QAAQ,CAAGD,YAAY,CAGjC,GAAM,CAAAE,SAAS,CAAGH,SAAS,CAACd,QAAQ,CAACO,SAAS,CAAC,CAAC,CAAEO,SAAS,CAACd,QAAQ,CAACQ,WAAW,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC,CAC1FM,SAAS,CAACd,QAAQ,CAAGiB,SAAS,CAC9BH,SAAS,CAACI,MAAM,CAAG,EAAE,CACrBJ,SAAS,CAACK,IAAI,CAAG,EAAE,CAInB,MAAO,CAAAL,SAAS,CAACE,QAAQ,GAAKD,YAAY,CACtCD,SAAS,CAACM,IAAI,CAACC,OAAO,CAACP,SAAS,CAACE,QAAQ,CAAED,YAAY,CAAC,CACxDD,SAAS,CAACM,IAAI,CACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}