{"ast":null,"code":"var _require=require('./dateutils'),isToday=_require.isToday,isDateNotInRange=_require.isDateNotInRange,sameMonth=_require.sameMonth;var _require2=require('./interface'),toMarkingFormat=_require2.toMarkingFormat;export function getState(day,current,props,disableDaySelection){var _context$selectedDate;var minDate=props.minDate,maxDate=props.maxDate,disabledByDefault=props.disabledByDefault,disabledByWeekDays=props.disabledByWeekDays,context=props.context;var state;if(!disableDaySelection&&((_context$selectedDate=context==null?void 0:context.selectedDate)!=null?_context$selectedDate:toMarkingFormat(current))===toMarkingFormat(day)){state='selected';}else if(isToday(day)){state='today';}else if(disabledByDefault){state='disabled';}else if(isDateNotInRange(day,minDate,maxDate)){state='disabled';}else if(!sameMonth(day,current)){state='disabled';}else if(disabledByWeekDays&&disabledByWeekDays.indexOf(day.getDay())!==-1){state='disabled';}return state;}","map":{"version":3,"names":["_require","require","isToday","isDateNotInRange","sameMonth","_require2","toMarkingFormat","getState","day","current","props","disableDaySelection","_context$selectedDate","minDate","maxDate","disabledByDefault","disabledByWeekDays","context","state","selectedDate","indexOf","getDay"],"sources":["C:/Users/User/Downloads/git_frontend/mobile/node_modules/react-native-calendars/src/day-state-manager.js"],"sourcesContent":["const { isToday, isDateNotInRange, sameMonth } = require('./dateutils');\nconst { toMarkingFormat } = require('./interface');\nexport function getState(day, current, props, disableDaySelection) {\n    const { minDate, maxDate, disabledByDefault, disabledByWeekDays, context } = props;\n    let state;\n    if (!disableDaySelection && (context?.selectedDate ?? toMarkingFormat(current)) === toMarkingFormat(day)) {\n        state = 'selected';\n    }\n    else if (isToday(day)) {\n        state = 'today';\n    }\n    else if (disabledByDefault) {\n        state = 'disabled';\n    }\n    else if (isDateNotInRange(day, minDate, maxDate)) {\n        state = 'disabled';\n    }\n    else if (!sameMonth(day, current)) {\n        state = 'disabled';\n    }\n    else if (disabledByWeekDays && disabledByWeekDays.indexOf(day.getDay()) !== -1) {\n        state = 'disabled';\n    }\n    return state;\n}\n"],"mappings":"AAAA,IAAAA,QAAA,CAAiDC,OAAO,CAAC,aAAa,CAAC,CAA/DC,OAAO,CAAAF,QAAA,CAAPE,OAAO,CAAEC,gBAAgB,CAAAH,QAAA,CAAhBG,gBAAgB,CAAEC,SAAS,CAAAJ,QAAA,CAATI,SAAS,CAC5C,IAAAC,SAAA,CAA4BJ,OAAO,CAAC,aAAa,CAAC,CAA1CK,eAAe,CAAAD,SAAA,CAAfC,eAAe,CACvB,MAAO,SAAS,CAAAC,QAAQA,CAACC,GAAG,CAAEC,OAAO,CAAEC,KAAK,CAAEC,mBAAmB,CAAE,KAAAC,qBAAA,CAC/D,GAAQ,CAAAC,OAAO,CAA8DH,KAAK,CAA1EG,OAAO,CAAEC,OAAO,CAAqDJ,KAAK,CAAjEI,OAAO,CAAEC,iBAAiB,CAAkCL,KAAK,CAAxDK,iBAAiB,CAAEC,kBAAkB,CAAcN,KAAK,CAArCM,kBAAkB,CAAEC,OAAO,CAAKP,KAAK,CAAjBO,OAAO,CACxE,GAAI,CAAAC,KAAK,CACT,GAAI,CAACP,mBAAmB,EAAI,EAAAC,qBAAA,CAACK,OAAO,cAAPA,OAAO,CAAEE,YAAY,QAAAP,qBAAA,CAAIN,eAAe,CAACG,OAAO,CAAC,IAAMH,eAAe,CAACE,GAAG,CAAC,CAAE,CACtGU,KAAK,CAAG,UAAU,CACtB,CAAC,IACI,IAAIhB,OAAO,CAACM,GAAG,CAAC,CAAE,CACnBU,KAAK,CAAG,OAAO,CACnB,CAAC,IACI,IAAIH,iBAAiB,CAAE,CACxBG,KAAK,CAAG,UAAU,CACtB,CAAC,IACI,IAAIf,gBAAgB,CAACK,GAAG,CAAEK,OAAO,CAAEC,OAAO,CAAC,CAAE,CAC9CI,KAAK,CAAG,UAAU,CACtB,CAAC,IACI,IAAI,CAACd,SAAS,CAACI,GAAG,CAAEC,OAAO,CAAC,CAAE,CAC/BS,KAAK,CAAG,UAAU,CACtB,CAAC,IACI,IAAIF,kBAAkB,EAAIA,kBAAkB,CAACI,OAAO,CAACZ,GAAG,CAACa,MAAM,CAAC,CAAC,CAAC,GAAK,CAAC,CAAC,CAAE,CAC5EH,KAAK,CAAG,UAAU,CACtB,CACA,MAAO,CAAAA,KAAK,CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}