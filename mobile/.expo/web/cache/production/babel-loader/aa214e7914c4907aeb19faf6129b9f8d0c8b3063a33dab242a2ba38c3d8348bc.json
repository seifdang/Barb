{"ast":null,"code":"import{getAssetByID}from'@react-native/assets-registry/registry';import AssetSourceResolver from'./AssetSourceResolver';var _customSourceTransformer;export function setCustomSourceTransformer(transformer){_customSourceTransformer=transformer;}export default function resolveAssetSource(source){if(typeof source==='object'){return source;}var asset=getAssetByID(source);if(!asset){return null;}var resolver=new AssetSourceResolver('https://expo.dev',null,asset);if(_customSourceTransformer){return _customSourceTransformer(resolver);}return resolver.defaultAsset();}Object.defineProperty(resolveAssetSource,'setCustomSourceTransformer',{get:function get(){return setCustomSourceTransformer;}});var pickScale=AssetSourceResolver.pickScale;export{pickScale};","map":{"version":3,"names":["getAssetByID","AssetSourceResolver","_customSourceTransformer","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","resolver","defaultAsset","Object","defineProperty","get","pickScale"],"sources":["C:\\Users\\User\\Downloads\\git_frontend\\mobile\\node_modules\\expo-asset\\src\\resolveAssetSource.ts"],"sourcesContent":["import { getAssetByID } from '@react-native/assets-registry/registry';\n\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\nlet _customSourceTransformer;\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | null {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(\n    // Doesn't matter since this is removed on web\n    'https://expo.dev',\n    null,\n    asset\n  );\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"],"mappings":"AAAA,OAASA,YAAY,KAAQ,wCAAwC,CAErE,MAAO,CAAAC,mBAA4C,KAAM,uBAAuB,CAEhF,GAAI,CAAAC,wBAAwB,CAE5B,MAAM,SAAU,CAAAC,0BAA0BA,CACxCC,WAAmE,EAEnEF,wBAAwB,CAAGE,WAAW,CACxC,CAMA,cAAc,SAAU,CAAAC,kBAAkBA,CAACC,MAAW,EACpD,GAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,CAAE,CAC9B,MAAO,CAAAA,MAAM,C,CAGf,GAAM,CAAAC,KAAK,CAAGP,YAAY,CAACM,MAAM,CAAC,CAClC,GAAI,CAACC,KAAK,CAAE,CACV,MAAO,KAAI,C,CAGb,GAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAP,mBAAmB,CAEtC,kBAAkB,CAClB,IAAI,CACJM,KAAK,CACN,CACD,GAAIL,wBAAwB,CAAE,CAC5B,MAAO,CAAAA,wBAAwB,CAACM,QAAQ,CAAC,C,CAE3C,MAAO,CAAAA,QAAQ,CAACC,YAAY,EAAE,CAChC,CAEAC,MAAM,CAACC,cAAc,CAACN,kBAAkB,CAAE,4BAA4B,CAAE,CACtEO,GAAG,SAAH,CAAAA,GAAGA,CAAA,EACD,MAAO,CAAAT,0BAA0B,CACnC,C,CACD,CAAC,CAEK,GAAQ,CAAAU,SAAS,CAAKZ,mBAAmB,CAAjCY,SAAS,CAAyB,OAAAA,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}