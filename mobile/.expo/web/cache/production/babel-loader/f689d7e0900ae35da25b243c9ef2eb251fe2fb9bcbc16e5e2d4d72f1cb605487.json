{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import Keyboard from\"react-native-web/dist/exports/Keyboard\";import Platform from\"react-native-web/dist/exports/Platform\";export default function useIsKeyboardShown(){var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),isKeyboardShown=_React$useState2[0],setIsKeyboardShown=_React$useState2[1];React.useEffect(function(){var handleKeyboardShow=function handleKeyboardShow(){return setIsKeyboardShown(true);};var handleKeyboardHide=function handleKeyboardHide(){return setIsKeyboardShown(false);};var subscriptions;if(\"web\"==='ios'){subscriptions=[Keyboard.addListener('keyboardWillShow',handleKeyboardShow),Keyboard.addListener('keyboardWillHide',handleKeyboardHide)];}else{subscriptions=[Keyboard.addListener('keyboardDidShow',handleKeyboardShow),Keyboard.addListener('keyboardDidHide',handleKeyboardHide)];}return function(){subscriptions.forEach(function(s){return s.remove();});};},[]);return isKeyboardShown;}","map":{"version":3,"names":["React","Keyboard","Platform","useIsKeyboardShown","_React$useState","useState","_React$useState2","_slicedToArray","isKeyboardShown","setIsKeyboardShown","useEffect","handleKeyboardShow","handleKeyboardHide","subscriptions","addListener","forEach","s","remove"],"sources":["C:\\Users\\User\\Downloads\\git_frontend\\mobile\\node_modules\\@react-navigation\\bottom-tabs\\src\\utils\\useIsKeyboardShown.tsx"],"sourcesContent":["import * as React from 'react';\nimport { EmitterSubscription, Keyboard, Platform } from 'react-native';\n\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    let subscriptions: EmitterSubscription[];\n\n    if (Platform.OS === 'ios') {\n      subscriptions = [\n        Keyboard.addListener('keyboardWillShow', handleKeyboardShow),\n        Keyboard.addListener('keyboardWillHide', handleKeyboardHide),\n      ];\n    } else {\n      subscriptions = [\n        Keyboard.addListener('keyboardDidShow', handleKeyboardShow),\n        Keyboard.addListener('keyboardDidHide', handleKeyboardHide),\n      ];\n    }\n\n    return () => {\n      subscriptions.forEach((s) => s.remove());\n    };\n  }, []);\n\n  return isKeyboardShown;\n}\n"],"mappings":"iEAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,QAAAC,QAAA,qDAAAC,QAAA,8CAG9B,cAAe,SAAS,CAAAC,kBAAkBA,CAAA,CAAG,CAC3C,IAAAC,eAAA,CAA8CJ,KAAK,CAACK,QAAQ,CAAC,KAAK,CAAC,CAAAC,gBAAA,CAAAC,cAAA,CAAAH,eAAA,IAA5DI,eAAe,CAAAF,gBAAA,IAAEG,kBAAkB,CAAAH,gBAAA,IAE1CN,KAAK,CAACU,SAAS,CAAC,UAAM,CACpB,GAAM,CAAAC,kBAAkB,CAAG,QAArB,CAAAA,kBAAkBA,CAAA,QAAS,CAAAF,kBAAkB,CAAC,IAAI,CAAC,GACzD,GAAM,CAAAG,kBAAkB,CAAG,QAArB,CAAAA,kBAAkBA,CAAA,QAAS,CAAAH,kBAAkB,CAAC,KAAK,CAAC,GAE1D,GAAI,CAAAI,aAAoC,CAExC,GAAI,QAAgB,KAAK,CAAE,CACzBA,aAAa,CAAG,CACdZ,QAAQ,CAACa,WAAW,CAAC,kBAAkB,CAAEH,kBAAkB,CAAC,CAC5DV,QAAQ,CAACa,WAAW,CAAC,kBAAkB,CAAEF,kBAAkB,CAAC,CAC7D,CACH,CAAC,IAAM,CACLC,aAAa,CAAG,CACdZ,QAAQ,CAACa,WAAW,CAAC,iBAAiB,CAAEH,kBAAkB,CAAC,CAC3DV,QAAQ,CAACa,WAAW,CAAC,iBAAiB,CAAEF,kBAAkB,CAAC,CAC5D,CACH,CAEA,MAAO,WAAM,CACXC,aAAa,CAACE,OAAO,CAAE,SAAAC,CAAC,QAAK,CAAAA,CAAC,CAACC,MAAM,EAAE,GAAC,CAC1C,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAT,eAAe,CACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}