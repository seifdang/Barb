{"ast":null,"code":"import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import ToggleButton from'./ToggleButton';import ToggleButtonGroup from'./ToggleButtonGroup';var ToggleButtonRow=function ToggleButtonRow(_ref){var value=_ref.value,onValueChange=_ref.onValueChange,children=_ref.children,style=_ref.style;var count=React.Children.count(children);return React.createElement(ToggleButtonGroup,{value:value,onValueChange:onValueChange},React.createElement(View,{style:[styles.row,style]},React.Children.map(children,function(child,i){if(child&&child.type===ToggleButton){return React.cloneElement(child,{style:[styles.button,i===0?styles.first:i===count-1?styles.last:styles.middle,child.props.style]});}return child;})));};ToggleButtonRow.displayName='ToggleButton.Row';var styles=StyleSheet.create({row:{flexDirection:'row'},button:{borderWidth:StyleSheet.hairlineWidth},first:{borderTopRightRadius:0,borderBottomRightRadius:0},middle:{borderRadius:0,borderLeftWidth:0},last:{borderLeftWidth:0,borderTopLeftRadius:0,borderBottomLeftRadius:0}});export default ToggleButtonRow;export{ToggleButtonRow};","map":{"version":3,"names":["React","StyleSheet","View","ToggleButton","ToggleButtonGroup","ToggleButtonRow","_ref","value","onValueChange","children","style","count","Children","createElement","styles","row","map","child","i","type","cloneElement","button","first","last","middle","props","displayName","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"sources":["C:\\Users\\User\\Downloads\\git_frontend\\mobile\\node_modules\\react-native-paper\\src\\components\\ToggleButton\\ToggleButtonRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\n\nimport ToggleButton from './ToggleButton';\nimport ToggleButtonGroup from './ToggleButtonGroup';\n\nexport type Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\n  const count = React.Children.count(children);\n\n  return (\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\n      <View style={[styles.row, style]}>\n        {React.Children.map(children, (child, i) => {\n          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n          if (child && child.type === ToggleButton) {\n            // @ts-expect-error: We're sure that child is a React Element\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                  ? styles.last\n                  : styles.middle,\n                // @ts-expect-error: We're sure that child is a React Element\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </View>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,QAAAC,UAAA,uDAAAC,IAAA,0CAG9B,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,CAAAC,iBAAiB,KAAM,qBAAqB,CAyCnD,GAAM,CAAAC,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAGC,IAAA,CAAsD,IAAnD,CAAAC,KAAK,CAAyCD,IAAA,CAA9CC,KAAK,CAAEC,aAAa,CAA0BF,IAAA,CAAvCE,aAAa,CAAEC,QAAQ,CAAgBH,IAAA,CAAxBG,QAAQ,CAAEC,KAAA,CAAcJ,IAAA,CAAdI,KAAA,CACzD,GAAM,CAAAC,KAAK,CAAGX,KAAK,CAACY,QAAQ,CAACD,KAAK,CAACF,QAAQ,CAAC,CAE5C,MACE,CAAAT,KAAA,CAAAa,aAAA,CAACT,iBAAiB,EAACG,KAAK,CAAEA,KAAM,CAACC,aAAa,CAAEA,aAAc,EAC5DR,KAAA,CAAAa,aAAA,CAACX,IAAI,EAACQ,KAAK,CAAE,CAACI,MAAM,CAACC,GAAG,CAAEL,KAAK,CAAE,EAC9BV,KAAK,CAACY,QAAQ,CAACI,GAAG,CAACP,QAAQ,CAAE,SAACQ,KAAK,CAAEC,CAAC,CAAK,CAE1C,GAAID,KAAK,EAAIA,KAAK,CAACE,IAAI,GAAKhB,YAAY,CAAE,CAExC,MAAO,CAAAH,KAAK,CAACoB,YAAY,CAACH,KAAK,CAAE,CAC/BP,KAAK,CAAE,CACLI,MAAM,CAACO,MAAM,CACbH,CAAC,GAAK,CAAC,CACHJ,MAAM,CAACQ,KAAK,CACZJ,CAAC,GAAKP,KAAK,CAAG,CAAC,CACfG,MAAM,CAACS,IAAI,CACXT,MAAM,CAACU,MAAM,CAEjBP,KAAK,CAACQ,KAAK,CAACf,KAAK,CAErB,CAAC,CAAC,CACJ,CAEA,MAAO,CAAAO,KAAK,CACd,CAAC,CACG,CACW,CAAC,CAExB,CAAC,CAEDZ,eAAe,CAACqB,WAAW,CAAG,kBAAkB,CAEhD,GAAM,CAAAZ,MAAM,CAAGb,UAAU,CAAC0B,MAAM,CAAC,CAC/BZ,GAAG,CAAE,CACHa,aAAa,CAAE,KACjB,CAAC,CACDP,MAAM,CAAE,CACNQ,WAAW,CAAE5B,UAAU,CAAC6B,aAC1B,CAAC,CAEDR,KAAK,CAAE,CACLS,oBAAoB,CAAE,CAAC,CACvBC,uBAAuB,CAAE,CAC3B,CAAC,CAEDR,MAAM,CAAE,CACNS,YAAY,CAAE,CAAC,CACfC,eAAe,CAAE,CACnB,CAAC,CAEDX,IAAI,CAAE,CACJW,eAAe,CAAE,CAAC,CAClBC,mBAAmB,CAAE,CAAC,CACtBC,sBAAsB,CAAE,CAC1B,CACF,CAAC,CAAC,CAEF,cAAe,CAAA/B,eAAe,CAG9B,OAASA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}