{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import SegmentedButtonItem from'./SegmentedButtonItem';import{getDisabledSegmentedButtonStyle}from'./utils';import{useInternalTheme}from'../../core/theming';var SegmentedButtons=function SegmentedButtons(_ref){var value=_ref.value,onValueChange=_ref.onValueChange,buttons=_ref.buttons,multiSelect=_ref.multiSelect,density=_ref.density,style=_ref.style,themeOverrides=_ref.theme;var theme=useInternalTheme(themeOverrides);return React.createElement(View,{style:[styles.row,style]},buttons.map(function(item,i){var disabledChildStyle=getDisabledSegmentedButtonStyle({theme:theme,buttons:buttons,index:i});var segment=i===0?'first':i===buttons.length-1?'last':undefined;var checked=multiSelect&&Array.isArray(value)?value.includes(item.value):value===item.value;var onPress=function onPress(e){var _item$onPress;(_item$onPress=item.onPress)===null||_item$onPress===void 0?void 0:_item$onPress.call(item,e);var nextValue=multiSelect&&Array.isArray(value)?checked?value.filter(function(val){return item.value!==val;}):[].concat(_toConsumableArray(value),[item.value]):item.value;onValueChange(nextValue);};return React.createElement(SegmentedButtonItem,_extends({},item,{key:i,checked:checked,segment:segment,density:density,onPress:onPress,style:[item.style,disabledChildStyle],labelStyle:item.labelStyle,theme:theme}));}));};var styles=StyleSheet.create({row:{flexDirection:'row'}});export default SegmentedButtons;export{SegmentedButtons};","map":{"version":3,"names":["React","StyleSheet","View","SegmentedButtonItem","getDisabledSegmentedButtonStyle","useInternalTheme","SegmentedButtons","_ref","value","onValueChange","buttons","multiSelect","density","style","themeOverrides","theme","createElement","styles","row","map","item","i","disabledChildStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","e","_item$onPress","call","nextValue","filter","val","concat","_toConsumableArray","_extends","key","labelStyle","create","flexDirection"],"sources":["C:\\Users\\User\\Downloads\\git_frontend\\mobile\\node_modules\\react-native-paper\\src\\components\\SegmentedButtons\\SegmentedButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport type { ThemeProp } from 'src/types';\n\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\n\ntype ConditionalValue<T extends string = string> =\n  | {\n      /**\n       * Array of the currently selected segmented button values.\n       */\n      value: T[];\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect: true;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: T[]) => void;\n    }\n  | {\n      /**\n       * Value of the currently selected segmented button.\n       */\n      value: T;\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect?: false;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: T) => void;\n    };\n\nexport type Props<T extends string = string> = {\n  /**\n   * Buttons to display as options in toggle button.\n   * Button should contain the following properties:\n   * - `value`: value of button (required)\n   * - `icon`: icon to display for the item\n   * - `disabled`: whether the button is disabled\n   * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\n   * - `checkedColor`: custom color for checked Text and Icon\n   * - `uncheckedColor`: custom color for unchecked Text and Icon\n   * - `onPress`: callback that is called when button is pressed\n   * - `label`: label text of the button\n   * - `showSelectedCheck`: show optional check icon to indicate selected state\n   * - `style`: pass additional styles for the button\n   * - `testID`: testID to be used on tests\n   */\n  buttons: {\n    value: T;\n    icon?: IconSource;\n    disabled?: boolean;\n    accessibilityLabel?: string;\n    checkedColor?: string;\n    uncheckedColor?: string;\n    onPress?: (event: GestureResponderEvent) => void;\n    label?: string;\n    showSelectedCheck?: boolean;\n    style?: StyleProp<ViewStyle>;\n    labelStyle?: StyleProp<TextStyle>;\n    testID?: string;\n  }[];\n  /**\n   * Density is applied to the height, to allow usage in denser UIs\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  theme?: ThemeProp;\n} & ConditionalValue<T>;\n\n/**\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SafeAreaView, StyleSheet } from 'react-native';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <SegmentedButtons\n *         value={value}\n *         onValueChange={setValue}\n *         buttons={[\n *           {\n *             value: 'walk',\n *             label: 'Walking',\n *           },\n *           {\n *             value: 'train',\n *             label: 'Transit',\n *           },\n *           { value: 'drive', label: 'Driving' },\n *         ]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     alignItems: 'center',\n *   },\n * });\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = <T extends string = string>({\n  value,\n  onValueChange,\n  buttons,\n  multiSelect,\n  density,\n  style,\n  theme: themeOverrides,\n}: Props<T>) => {\n  const theme = useInternalTheme(themeOverrides);\n\n  return (\n    <View style={[styles.row, style]}>\n      {buttons.map((item, i) => {\n        const disabledChildStyle = getDisabledSegmentedButtonStyle({\n          theme,\n          buttons,\n          index: i,\n        });\n        const segment =\n          i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n\n        const checked =\n          multiSelect && Array.isArray(value)\n            ? value.includes(item.value)\n            : value === item.value;\n\n        const onPress = (e: GestureResponderEvent) => {\n          item.onPress?.(e);\n\n          const nextValue =\n            multiSelect && Array.isArray(value)\n              ? checked\n                ? value.filter((val) => item.value !== val)\n                : [...value, item.value]\n              : item.value;\n\n          // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n          onValueChange(nextValue);\n        };\n\n        return (\n          <SegmentedButtonItem\n            {...item}\n            key={i}\n            checked={checked}\n            segment={segment}\n            density={density}\n            onPress={onPress}\n            style={[item.style, disabledChildStyle]}\n            labelStyle={item.labelStyle}\n            theme={theme}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n});\n\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons as SegmentedButtons };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}