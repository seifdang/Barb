{"ast":null,"code":"import*as React from'react';export var ToggleButtonGroupContext=React.createContext(null);var ToggleButtonGroup=function ToggleButtonGroup(_ref){var value=_ref.value,onValueChange=_ref.onValueChange,children=_ref.children;return React.createElement(ToggleButtonGroupContext.Provider,{value:{value:value,onValueChange:onValueChange}},children);};ToggleButtonGroup.displayName='ToggleButton.Group';export default ToggleButtonGroup;export{ToggleButtonGroup};","map":{"version":3,"names":["React","ToggleButtonGroupContext","createContext","ToggleButtonGroup","_ref","value","onValueChange","children","createElement","Provider","displayName"],"sources":["C:\\Users\\User\\Downloads\\git_frontend\\mobile\\node_modules\\react-native-paper\\src\\components\\ToggleButton\\ToggleButtonGroup.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport type Props<Value = string> = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: Value) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: Value | null;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n};\n\ntype ToggleButtonContextType<Value> = {\n  value: Value | null;\n  onValueChange: (item: Value) => void;\n};\n\nexport const ToggleButtonGroupContext =\n  //@ts-expect-error: TS can't ensure the type from Group to children\n  React.createContext<ToggleButtonContextType>(null as any);\n\n/**\n * Toggle group allows to control a group of toggle buttons.</br>\n * It doesn't change the appearance of the toggle buttons. If you want to group them in a row, check out [ToggleButton.Row](ToggleButtonRow).\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Group\n *       onValueChange={value => setValue(value)}\n *       value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst ToggleButtonGroup = <Value = string,>({\n  value,\n  onValueChange,\n  children,\n}: Props<Value>) => (\n  <ToggleButtonGroupContext.Provider\n    value={{\n      value,\n      onValueChange,\n    }}\n  >\n    {children}\n  </ToggleButtonGroupContext.Provider>\n);\n\nToggleButtonGroup.displayName = 'ToggleButton.Group';\n\nexport default ToggleButtonGroup;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonGroup };\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAsB9B,MAAO,IAAM,CAAAC,wBAAwB,CAEnCD,KAAK,CAACE,aAAa,CAA0B,IAAW,CAAC,CA2B3D,GAAM,CAAAC,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAGC,IAAA,KACxB,CAAAC,KAAK,CAGQD,IAAA,CAHbC,KAAK,CACLC,aAAa,CAEAF,IAAA,CAFbE,aAAa,CACbC,QAAA,CACaH,IAAA,CADbG,QAAA,CACa,MACb,CAAAP,KAAA,CAAAQ,aAAA,CAACP,wBAAwB,CAACQ,QAAQ,EAChCJ,KAAK,CAAE,CACLA,KAAK,CAALA,KAAK,CACLC,aAAA,CAAAA,aACF,CAAE,EAEDC,QACgC,CAAC,EACrC,CAEDJ,iBAAiB,CAACO,WAAW,CAAG,oBAAoB,CAEpD,cAAe,CAAAP,iBAAiB,CAGhC,OAASA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}